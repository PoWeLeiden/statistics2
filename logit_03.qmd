---
code-annotations: hover
---

# Predicted Probabilities {#sec-logit-predicted-probabilities}

```{r}
#| label: setup
#| echo: false
#| message: false
#| warning: false

#Packages
library(sjPlot)          #checking variable names, values, and labels
library(rio)             #loading data
library(tidyverse)       #data manipulation and plotting
library(marginaleffects) #calculating marginal effects & predictions

#Data
ESS9NL <- import("data/ESS9e03, Netherlands.sav")
```

Our last chapter focused on interpreting logistic regression models via marginal effects: how does the *probability* that Y = 1 change, on average, when an independent variable increases by one unit. In this chapter we'll show you how to use the `predictions()` command from the `marginaleffects` package to obtain these underlying probabilities. We will discuss how to use this command to investigate three types of predicted probability:

-   The predicted probability for each observation used in the model
-   Average predicted probabilities for a specific predictor variable at different values of that variable
-   Average predicted probabilities when holding the predictors at a specific combination of values

See @sec-predicted-residual-values for the use of this command with linear regression models.

Here are the packages that we will use along with our data:

```{r}
#| eval: false

#Packages
library(sjPlot)          #checking variable names, values, and labels
library(rio)             #loading data
library(tidyverse)       #data manipulation and plotting
library(marginaleffects) #calculating marginal effects & predictions

#Data
ESS9NL <- import("ESS9e03, Netherlands.sav")
```

We will examine the same model that investigated in the last chapter - one where we predicted whether a survey respondent said that they had voted in the most recent election based on their gender, age, trust in politicians, and ideology. Here are the data management steps we took to prepare our data for analysis as well as our model; these steps are described in more detail in the preceding chapters:

```{r}
#Data Preparation
ESS9NL <- ESS9NL |>
  #Factorize our IVs
  mutate(gndr = factorize(gndr),  
         vote = factorize(vote))  |> 
  #Remove Not Eligible to Vote Category from vote
  mutate(vote = na_if(vote, "Not eligible to vote")) |>  
  #Relevel our variables like we did last time
  mutate(vote = relevel(vote, "No"), 
         gndr = relevel(gndr, "Female"))

#Our model
Vote_model_mp <- glm(vote ~ gndr + agea + trstplt + lrscale, 
                     data = ESS9NL, family = "binomial")

#Check the output
summary(Vote_model_mp)
```

## Predictions for Individual Observations

Our logistic model makes a prediction for each observation in the model: what is the probability that the dependent variable = 1 (here: that people voted) based on the parameters of the model (the coefficients) and the observation's combination of values on the independent variables. We can use the `predictions()` function to obtain these estimates.

```{r}
#Store the results as a new object
Vote_pred <- predictions(Vote_model_mp,
                         conf_level = 0.95, 
                         newdata = ESS9NL)

#We can use tibble() to get a nice tabular overview
tibble(Vote_pred)
```

Here is how to read this syntax:

`Vote_pred <-`

:   Store results in a new data object. The results should always be saved to a new dataset, which we give a name of our choosing.

`predictions(Vote_model_mp,`

:   Apply the function predictions on the model specified in brackets.

`conf_level = 0.95,`

:   This is the default confidence interval. This can be safely omitted from the syntax *if* you want the 95% confidence interval. Alternatively, if you wanted to generate some other confidence interval (e.g., the 90% or 99%) then you would include this and change the numeric value (e.g., `conf_level = 0.99`).

`newdata = ESS9NL)`

:   The inclusion of this bit of syntax makes `predictions()` copy over all other variables from the original dataset. This part can thus be omitted from the syntax if including the other variables is not needed.

## Average Predicted Values for Specific IVs

We can also use the `predictions()` function to obtain the average probability that the dependent variable = 1 at specific values of an independent variable based on our model. For instance, we might want to see the expected probability of a person voting if they are 20 years old vs. if they are 60 years old to help communicate the meaning of our results. These types of predictions may then be presented in a figure of predicted probabilities as shown in @sec-presentation-predicted-probability-plots .

### Continuous Predictor Variable

Here, we use `predictions()` to show us the predicted probability of voting based on the trust in politicians variable (`trstplt`). This variable is scaled from 0 to 10 in 1 point increments (missing value categories are shown here but coded as NA in our dataset):

```{r}
ESS9NL |> 
  select(trstplt) |> 
  view_df()

table(ESS9NL$trstplt)
```

We will ask `predictions()` to calculate predicted values from 0 to 10 in 2pt increments in this example. An alternative would be to calculate probabilities for all increments of the variable, although this would produce an overload of output if the variable could take on many different values. An alternative in those scenarios would be use to the values at the minimum, 1st quartile, median, 3rd quartile, and maximum of the variable (with these values obtainable via the same process shown @sec-predictions-for-a-continuous-predictor-variable).

```{r}
#Store the predictions as a new object
Pred_conts <- predictions(Vote_model_mp,
                          newdata = datagrid(trstplt = seq(from = 0, to = 10, by = 2))) 
```

`newdata = datagrid(trstplt`

:   All predictors in the model will be held at the mean/mode, except for those specified between brackets.

`= seq(from = 0, to = 10, by = 2)))`

:   We ask for predictions at several values for a specific sequence (`seq`) of numbers: `from` defines the minimum, `to` the maximum, and `by` the increment. We could alternatively have written these numbers out (e.g., `trstplt = c(0,2,4,6,8,10)`) - this may be more or less labor for us depending on the scale of the variable.

Let's take a look at the predictions:

```{r}
tibble(Pred_conts) # <1>
```

1.  `tibble()` is used only to give you a glimpse of the underlying data that the command creates.

::: callout-note
#### Output Explanation

The layout of this output is the same as we saw when making predictions from a linear regression model (see @sec-predicted-residual-values):

-   The `estimate` column provides the predicted probability.
-   The `p.value` through `conf.high` columns provide uncertainty estimates.
-   We can then see columns for the other independent variables in the model (`gndr`, `agea`, `lrscale)` . These columns tell us the value that these variables have been held constant at when making predictions from the model. The `predictions()` command will automatically hold continuous variables constant at their mean, and factor variables at their mode, when `newdata = datagrid()` is used in the manner shown above.
-   The final two columns are `trstplt`, which shows the value of the trust in politicians measure used in making the prediction, and a column (not shown) for our DV (`vote`) that indicates which category is being predicted.
:::

### Factor Predictor Variable

The code for categorical variables is slightly different as we use the `by =` statement. Here, we calculate the average predicted probability to vote for men and women, with all other predictors held at representative values (the mean for continuous or the mode for factor variables).

```{r}
#Obtain predictions and store as new object
Pred_cat <- predictions(Vote_model_mp,
                        by = "gndr", 
                        newdata = "mean") 

#Call the object in a nice tabular view
tibble(Pred_cat)
```

`by = "gndr"`

:   This tells the command that we want predicted values for each category of our factor variable.

`newdata = "mean"`

:   This tells the command that we want to hold the other variables in the model constant at their mean (if a continuous variable) or mode (if a factor variable). This must be specified here due to the use of the `by =` option.

## Predictions for specific combinations of the predictor variables

Finally, we can estimate what the predicted probability would be for an observation with specific values for each of the predictors in the model.

Here, we estimate the probability for a man (`gndr`), aged 33 (`agea`), with a score of 2 for trust in politicians (`trstplt`), and a score of 8 for left-right position (`lrscale`). To do so we need to specify the values for all variables between brackets after `newdata = datagrid()`.

```{r}
#Calculate and store
Pred_specific <- predictions(Vote_model_mp,
                             newdata = datagrid(gndr = c("Male"), # <1>
                                                agea = c(33),   
                                                trstplt = c(2), 
                                                lrscale = c(8)))

Pred_specific
```

1.  We need to use parentheses with this variable because it is a (labelled) factor variable.
